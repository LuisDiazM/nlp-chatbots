// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package cmd

import (
	"github.com/LuisDiazM/agent-manager/cmd/config"
	"github.com/LuisDiazM/agent-manager/domain/usecases/trainingUsecase"
	"github.com/LuisDiazM/agent-manager/domain/usecases/userUsecase"
	"github.com/LuisDiazM/agent-manager/infraestructure/app"
	"github.com/LuisDiazM/agent-manager/infraestructure/database"
	"github.com/LuisDiazM/agent-manager/infraestructure/database/repositories"
	"github.com/LuisDiazM/agent-manager/infraestructure/messaging"
	"github.com/LuisDiazM/agent-manager/infraestructure/messaging/repositories/trainingDataRepository"
	"github.com/LuisDiazM/agent-manager/infraestructure/messaging/repositories/userRepository"
	"github.com/LuisDiazM/agent-manager/infraestructure/server"
)

// Injectors from wire.go:

func CreateApp() *app.Application {
	engine := server.NewServer()
	env := config.NewEnvironmentsSpecification()
	databaseImp := database.NewDatabaseImplementation(env)
	trainingRepository := repositories.NewTrainingRepository(databaseImp)
	natsImp := messaging.NewNatsImplementation(env)
	trainingMessagingRepository := trainingDataRepository.NewTrainingNNModelsRepository(natsImp)
	trainingUsecase := trainingusecase.NewTrainingUsecase(trainingRepository, trainingMessagingRepository)
	userRepositoryGateway := repositories.NewUserRepository(databaseImp)
	licensesRepoGateway := userRepository.NewUserLicenseMessagingRepository(natsImp)
	userUsecase := userusecase.NewUserUsecase(userRepositoryGateway, licensesRepoGateway)
	application := app.NewApplication(engine, env, databaseImp, trainingUsecase, userUsecase, natsImp)
	return application
}
